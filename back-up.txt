while (true)
    {
        // =================<INIT>================

        srand(time(NULL));
        init_menu(menu);
        init_black_hole();
        init_back_ground(back_ground);
        init_chicken_level_1(chicken);
        init_chicken_level_1_2(chicken2);
        init_random_present(present);
        init_asteroid(asteroid);
        init_player(player);
        init_boss(boss);

        // =================<MENU>================
        Mix_AllocateChannels(100);
        play_music_level(level, background_music);

        while (menu->get_game_has_started() == false)
        {
            menu->render_menu();
            while (SDL_PollEvent(&event))
            {
                if (event.type == SDL_QUIT)
                {
                    exit(EXIT_FAILURE);
                }
                menu->process_input_menu(event);
            }
            SDL_RenderPresent(renderer);
            SDL_RenderClear(renderer);
        }

        // ===============<LEVEL 1>================

        level = 1;


        play_music_level(level, background_music);
        Mix_VolumeMusic(10);
        intro_before_level(level);

        while (level == 1)
        {
            common_process(player, present, event);

            process_chicken_vs_player(chicken, player);
            if (all_level_1_chicken_dead(chicken) == true && player->get_health() >= 1 && player_want_to_play_again == false)
            {
                level++;
            }
            else if (player_want_to_play_again == true && player->get_health() <= 0)
            {
                level = 1;
                player_want_to_play_again = false;
                player->set_health(3);
                player->set_rect_cordinate(SCREEN_WIDTH / 2 - player->get_rect().w / 2, SCREEN_HEIGHT / 2 - player->get_rect().h / 2);
                init_chicken_level_1(chicken);
            }
            menu_process_player_related_event();
            update_game_state();
        }

        // ===============<LEVEL 2>================

        intro_before_level(level);
        Mix_VolumeMusic(10);
        play_music_level(level, background_music);
        while (level == 2)
        {
            common_process(player, present, event);
            process_astroid_vs_player(asteroid, player);
            if (all_level_2_asteroid_dead(asteroid) == true && player->get_health() >= 1 && player_want_to_play_again == false)
            {
                level++;
            }
            else if (player->get_health() <= 0 && player_want_to_play_again == true)
            {
                level = 2;
                player->set_health(3);
                player_want_to_play_again = false;
                player->set_rect_cordinate(SCREEN_WIDTH / 2 - player->get_rect().w / 2, SCREEN_HEIGHT / 2 - player->get_rect().h / 2);
                init_asteroid(asteroid);
            }
            menu_process_player_related_event();
            update_game_state();
        }



        // ===============<LEVEL 3>================

        intro_before_level(level);
        Mix_VolumeMusic(10);
        play_music_level(level, background_music);

        while (level == 3)
        {
            common_process(player, present, event);
            process_boss_vs_player(boss, player);
            if (all_boss_dead(boss) == true || player->get_health() >= 1 && player_want_to_play_again == false)
            {
                level++;
            }
            else if(player->get_health() <= 0 && player_want_to_play_again == true && all_boss_dead(boss) == false)
            {
                level = 3;
                player->set_health(3);
                player_want_to_play_again = false;
                player->set_rect_cordinate(SCREEN_WIDTH / 2 - player->get_rect().w / 2, SCREEN_HEIGHT / 2 - player->get_rect().h / 2);
                init_boss(boss);
            }
            menu_process_player_related_event();
            update_game_state();
        }
        if(level == 4)
        {
            
        }
        // FREEING METHOD AND QUITTING
    }